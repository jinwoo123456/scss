//string 문자형//
$po: position;
$abs: absolute; //sass 에서는 자바스크립트 처럼 "" '' 안 넣어도 됨
$url: "../images/dog.jpg"; //경로는 "" 있어야 됨
.string {
  #{$po}: $abs;
  background: $url;
}
//number 숫자형//

// const a = 100; 자바스크립트는 단위밖에 표현이 안됨.
//sass에서는 단위가 달라도 연산 가능

$w: 20px;
$h: 3rem;
$ln: 1;
$result: calc($w + $h);
.number {
  font-size: $result;
  line-height: $ln;
}
//color 색상형//

// const:red = 'red'; 자바스크립트 에서는 문자임
// sass는 색상형이 따로 있음.
$blue: blue;
$white: #fff;
$mint: #b5e7b5;
$black02: #76bae733;

$blue05: rgba($blue, 0.5);
$mint06: rgba($mint, 0.6); //hex 코드로 정의하고 rgba로 바꿀떄 이렇게
.color {
  color: $mint06;
}

//list 배열//

//const a =[1,2,3,4] 자바스크립트식 배열
//sass에서는 배열 만들 수 있음
$margintop: (10, 20, 30);

// @each $배열의아이템 in $배열변수명 {}
@each $item in $margintop {
  .mt#{$item} {
    margin-top: $item + px;
  }
} //자바스크립트 foreach와 동일

$fontstyle: sm 20px 10px, base 30px 15px; //sm 20px 10px 한 세트
//base 30px 15px한 세트

// .font-sm {
//   font-size: 10px;
//   line-height: 20px;
// }
// .font-base {
//   font-size: 15px;
//   line-height: 30px;
// } 이렇게 만들고 싶으면 >>>>

@each $class, $lineheight, $fontsize in $fontstyle {
  .font-#{$class} {
    line: $lineheight;
    font-size: $fontsize;
  }
} // 클래스 여러개 한번에 정의

//map 객체//
//실무에선 객체를 많이 씀 (많이 어려움)
// const obj = { key:value, name:'na',age:el,address:"inceon" ) //자바스크립트에 쓰는 객체

$fontsize: (
  lg: 20px,
  base: 15px,
  sm: 10px,
);

div {
  font-size: map-get($fontsize, lg); //$map(변수명), key
}
